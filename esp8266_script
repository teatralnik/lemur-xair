#include <ESP8266WiFi.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <OSCMessage.h>
#include <OSCBundle.h>
#include <OSCData.h>
#include <OSCTiming.h>

WiFiUDP Udp;
char ssid[] = "********";          //  SSID (name)
char pass[] = "********";    // Password

const unsigned int outPort = 10024;
const unsigned int localPort = 8000;


IPAddress xair(192, 168, 1, 100);
IPAddress local_IP(192, 168, 1, 98);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress lemur(192, 168, 1, 99);

unsigned long timing;

void WiFiEvent(WiFiEvent_t event) {

  switch (event) {
    case WIFI_EVENT_STAMODE_GOT_IP:
    //When connected set
    //Serial.print("WiFi connected! IP address: ");
    //Serial.println(WiFi.localIP());
    case WIFI_EVENT_STAMODE_DISCONNECTED:
      //Serial.println("WiFi lost connection");
      break;
    default: break;
  }
}

void connect() {
  WiFi.disconnect(true);
  delay(1000);
  if (!WiFi.config(local_IP, gateway, subnet)) {
    // Serial.println("STA Failed to configure");
  }
  WiFi.begin(ssid, pass);
  WiFi.onEvent(WiFiEvent);
  // Just wait ...
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  Udp.begin(localPort);
}

void request (const char* message) {
  OSCMessage msg(message);
  Udp.beginPacket(xair, outPort);
  msg.send(Udp);
  Udp.endPacket();
  msg.empty();
}

void processIncoming() {
  OSCBundle bundle;
  OSCMessage msg;
  int size = Udp.parsePacket();
  if (size > 0) {
    if (Udp.remoteIP() == ipad) {
      while (size--) {
        bundle.fill(Udp.read());
      }
      if (!bundle.hasError()) {
        bundle.route("/*", toxair);
      }
    }
    else if (Udp.remoteIP() == xair) {
      while (size--) {
        msg.fill(Udp.read());
      }
      if (!msg.hasError()) {
        if (msg.match("/*")) {
          fromxair(msg);
        }
      }
    }
  }
}

void toxair(OSCMessage & msg, int addroffset) {
  Udp.beginPacket(xair, outPort);
  msg.send(Udp);
  Udp.endPacket();
  msg.empty();
  timingOSC = millis();
}

void fromxair(OSCMessage & msg) {
  OSCBundle bundle;
  bundle.add(msg);
  bundle.setTimetag(oscTime());
  Udp.beginPacket(lemur, localPort);
  bundle.send(Udp);
  Udp.endPacket();
  bundle.empty();
}

void setup() {
  //Serial.begin(115200);
  connect();
  delay(1000);
}

void loop() {
  if (millis() - timing > 9500) {
    timing = millis();
    request("/xremote");
  }
  processIncoming();
}
